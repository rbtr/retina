ARG builderImage="ghcr.io/microsoft/retina/retina-builder:0.0.1"
ARG toolsImage="ghcr.io/microsoft/retina/retina-tools:0.0.1"

# Stage: Build binary
FROM --platform=$TARGETPLATFORM mcr.microsoft.com/oss/go/microsoft/golang:1.21 AS builder
LABEL Name=retina-builder Version=0.0.1

RUN apt-get update &&\
    apt-get -y install lsb-release wget software-properties-common gnupg file git make

RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
RUN add-apt-repository "deb http://apt.llvm.org/bullseye/ llvm-toolchain-bullseye-14 main"
RUN apt-get update

RUN apt-get install -y clang-14 lldb-14 lld-14 clangd-14 man-db
RUN apt-get install -y bpftool libbpf-dev

RUN ln -s /usr/bin/clang-14 /usr/bin/clang

COPY . /go/src/github.com/microsoft/retina 
WORKDIR /go/src/github.com/microsoft/retina

# Default linux/architecture.
ARG GOOS=linux
ENV GOOS=${GOOS}

ARG GOARCH=amd64
ENV GOARCH=${GOARCH}

ENV CGO_ENABLED=0

ARG VERSION
# Application Insights ID for telemetry.
# Default value is empty.
# Set this if you want to enable Application Insights telemetry.
ARG APP_INSIGHTS_ID

ARG GOCACHE=/root/.cache/go-build
ENV GOCACHE $GOCACHE

RUN --mount=type=cache,target="$GOCACHE" go build -v -o /go/bin/retina/controller -ldflags "-X main.version="$VERSION" -X "main.applicationInsightsID"="$APP_INSIGHTS_ID"" controller/main.go 
RUN --mount=type=cache,target="$GOCACHE" go build -v -o /go/bin/retina/captureworkload -ldflags "-X main.version="$VERSION" -X "main.applicationInsightsID"="$APP_INSIGHTS_ID"" captureworkload/main.go
# We only build initretina for linux.
RUN --mount=type=cache,target="$GOCACHE" go build -v -o /go/bin/retina/initretina -ldflags "-X main.version="$VERSION" -X "main.applicationInsightsID"="$APP_INSIGHTS_ID"" ././init/retina/main_linux.go

# ----------------------------------------------------------------------------------- #

# Stage: Prepare clang and tools
# Bullseye -> debian11
FROM  --platform=$TARGETPLATFORM mcr.microsoft.com/mirror/docker/library/debian:bullseye@sha256:a648e10e02af129706b1fb89e1ac9694ae3db7f2b8439aa906321e68cc281bc0 AS tools

LABEL Name=retina-tools Version=0.0.1

WORKDIR /tmp
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    curl xz-utils binutils wget gnupg2
RUN apt-get install -y --no-install-recommends \
    ca-certificates tcpdump iproute2 iptables

RUN mkdir -p /usr/local

ARG GOARCH=amd64
ENV GOARCH=${GOARCH}

RUN if [ "$GOARCH" = "amd64" ] ; then \
    # Download clang and llvm.
    wget https://releases.llvm.org/release-keys.asc; \
    gpg2 --import release-keys.asc; \
    wget -O clang+llvm.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz; \
    wget -O clang+llvm.tar.xz.sig https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04.tar.xz.sig; \
    gpg2 --verify clang+llvm.tar.xz.sig clang+llvm.tar.xz; \
    tar -C /usr/local -xJf ./clang+llvm.tar.xz --no-same-owner; \
    mv /usr/local/clang+llvm-14.0.0-x86_64-linux-gnu-ubuntu-18.04 /usr/local/clang+llvm; \
    else \
    # GOARCH=Arm64.
    # Download clang and llvm.
    # Need more dependencies for Arm64.
    apt-get update; \
    apt-get install -y --no-install-recommends libc6 zlib1g libncurses5; \
    apt-get install -y --no-install-recommends apt-file; \
    apt-file update; \
    apt-file find libstdc++.so.6; \
    apt-get install -y --no-install-recommends libstdc++6; \
    # Download clang and llvm.
    wget -O clang+llvm.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-14.0.0/clang+llvm-14.0.0-aarch64-linux-gnu.tar.xz; \
    tar -C /usr/local -xJf ./clang+llvm.tar.xz --no-same-owner; \
    mv /usr/local/clang+llvm-14.0.0-aarch64-linux-gnu /usr/local/clang+llvm; \
    # Prepare dependencies for clang to be copied to base.
    apt-get install -y --no-install-recommends libncurses5; \
    fi

# Copy tools.
RUN mkdir -p /tmp/bin
RUN arr="tcpdump ip ss iptables-legacy iptables-legacy-save iptables-nft iptables-nft-save cp uname" ;\
    for i in $arr; do    \
    cp $(which $i) /tmp/bin;   \
    done

# ----------------------------------------------------------------------------------- #

# Stage: Base distroless init image
FROM --platform=$TARGETPLATFORM mcr.microsoft.com/mirror/gcr/distroless/cc-debian11:latest@sha256:b53fbf5f81f4a120a489fedff2092e6fcbeacf7863fce3e45d99cc58dc230ccc as init
LABEL Name=retina-init Version=0.0.1

COPY --from=builder /go/bin/retina/initretina /retina/initretina

# Copy dependencies for mount. Needed for initretina.
COPY --from=tools /lib/ /lib
COPY --from=tools /usr/lib/ /usr/lib
COPY --from=tools /bin/mount /bin/mount

ENTRYPOINT ["./retina/initretina"]

# ----------------------------------------------------------------------------------- #

# Stage: Base distroless image
FROM --platform=$TARGETPLATFORM mcr.microsoft.com/mirror/gcr/distroless/cc-debian11:latest@sha256:b53fbf5f81f4a120a489fedff2092e6fcbeacf7863fce3e45d99cc58dc230ccc as agent

LABEL Name=retina-controller Version=0.0.1

# Copy dependencies for clang and tools.
COPY --from=tools /lib/ /lib
COPY --from=tools /usr/lib/ /usr/lib

# Copy clang+llvm.
COPY --from=tools /usr/local/clang+llvm/bin/clang /bin/clang

# Copy tools.
COPY --from=tools /tmp/bin/ /bin

# Copy the Retina binary.
COPY --from=builder /go/bin/retina/controller /retina/controller
COPY --from=builder /go/bin/retina/captureworkload /retina/captureworkload

# Copy the plugin eBPF code and headers.
COPY --from=builder /go/src/github.com/microsoft/retina/pkg/plugin /go/src/github.com/microsoft/retina/pkg/plugin

EXPOSE 80
ENTRYPOINT ["./retina/controller"]
